remove(data)
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.5))
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
redundant=colSums(subset.matrix) > 2
subset.matrix
sorted_lift
sorted_lift=sort(rules,by= 'lift' )
sorted_lift
rules <- apriori(transac, parameter=list(support=0.01, confidence=0.5))
rules
rules <- apriori(transac)
rules
dim(transac)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
transac <- as(transac,"transactions")
rules <- apriori(transac, parameter=list(support=0.01, confidence=0.1))
rules
rules <- apriori(transac)
rules
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
rules <- apriori(transac, parameter=list(support=0.000001, confidence=0.1))
rules
rules <- apriori(transac, parameter=list(support=0.00001, confidence=0.1))
rules
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
which(redundant)
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned
sort3=head(sort(rulepruned,by ="lift"),3)
inspect(head(sort(rulepruned,by ="lift"),3))
plot(sort3, method='scatterplot')
plot(sort3, method='graph', control = list(type='items'))
plot(sort3, method = 'grouped')
summary(transac)
summary(transac)
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$item_name %>% unique() %>% length()
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
str(transac)
transac <- as(transac,"transactions")
summary(transac)
data("Groceries")
summary(Groceries)
Groceries %>% View()
str(Groceries)
?splot
?split
a <- split(transac$item_name,transac$invoice_uuid)
transac <- restaur_6d %>% select(invoice_uuid, item_name)
a <- split(transac$item_name,transac$invoice_uuid)
a
View(a)
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
summary(transac) #find most popular item
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.1))
rules
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
which(redundant)
sort3=head(sort(rulepruned,by ="lift"),3)
inspect(head(sort(rulepruned,by ="lift"),3))
plot(sort3, method='scatterplot')
plot(sort3, method='graph', control = list(type='items'))
sort3=head(sort(rulepruned,by ="lift"),10)
inspect(head(sort(rulepruned,by ="lift"),10))
plot(sort3, method='scatterplot')
plot(sort3, method='graph', control = list(type='items'))
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
tranc_data <-read.csv("C:/Users/tsunh/Desktop/Schoolwork/DataMining/dataset/iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
table(tranc_data$restaurant_uuid) # 6d0ebab3-edf8-4e04-a947-1973e76ab11f 這間餐廳最多筆資料
restaur_id <- unique(tranc_data$restaurant_uuid)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
#restaur_6d$timestamp[1:10]
#unix_t <- restaur_6d$unix[1]
#as.POSIXct(unix_t, origin="1970-01-01",tz = "GMT")
trans_time <- function(unix_t){
return(as.character(as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")))
}
#先分成24小時，看每小時的來客數
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
# choose freq non zero
saveRDS(MyDatesTable,"res6.rds")
freq_non_zero <- subset(MyDatesTable,MyDatesTable$Freq != 0 & MyDatesTable$time <= as.POSIXct("2017-05-10"))
#boxplot for each hour
ggplot(data=freq_non_zero , aes(as.factor(time),Freq,fill = as.factor(time))) +
geom_boxplot()+
guides(fill=FALSE)
#time series plot
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-09") &
MyDatesTable$Var1 > as.POSIXct("2016-04-02"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
#forecast
library(forecast)
library(zoo)
library(xts)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
CutDatesTable$Var1
autoplot(x)
auto.arima(x)
library(ggfortify)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
x.ts = ts(xts_obj, freq=24*7,start = c(2016,4,2))
plot(forecast(ets(x.ts), 24))
c(as.POSIXct(CutDatesTable$Var1) + 12)
#association rules
library(arulesViz)
require(xlsx)
library(gdata)
library(dplyr)
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
str(transac)
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
summary(transac) #find most popular item
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.1))
rules
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
which(redundant)
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned
sort3=head(sort(rulepruned,by ="lift"),10)
inspect(head(sort(rulepruned,by ="lift"),10))
plot(sort3, method='scatterplot')
plot(sort3, method='graph', control = list(type='items'))
plot(sort3, method = 'grouped')
inspect(head(sort(rulepruned,by ="lift"),30))
sort3=head(sort(rulepruned,by ="lift"),30)
plot(sort3, method='scatterplot')
plot(sort3, method='graph', control = list(type='items'))
plot(sort3, method = 'grouped')
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
str(transac)
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
summary(transac) #find most popular item
transac$invoice_uuid %>% unique()
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
dim(transac)
unique(transac$invoice_uuid)
unique(transac$invoice_uuid) %>% length()
split(transac$item_name,transac$invoice_uuid)
a <- split(transac$item_name,transac$invoice_uuid)
str(a)
a$`000026EA-B2E6-41C8-9A99-6C52E825FE4F`
a$`02D054E9-2F32-4B90-BD31-8363CA338918`
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
?is.subset
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[2])
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
summary(transac) #find most popular item
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.1))
rules
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
which(redundant)
rulepruned=sorted_lift[!redundant]
sort3=head(sort(rulepruned,by ="lift"),30)
inspect(head(sort(rulepruned,by ="lift"),30))
plot(sort3, method='scatterplot')
plot(sort3, method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
rulepruned %>% length()
plot(sort(rulepruned,by ="lift"), method='scatterplot')
,100
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
subset.matrix\
subset.matrix
View(subset.matrix)
subset.matrix=as.matrix(is.subset(sorted_lift,sorted_lift))
View(subset.matrix)
subset.matrix=as.matrix(is.subset(sorted_lift,sorted_lift))
redundant=colSums(subset.matrix) > 1
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned %>% length()
sort3=head(sort(rulepruned,by ="lift"),30)
inspect(head(sort(rulepruned,by ="lift"),30))
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
sorted_lift %>% head()
sorted_lift
inspect(sorted_lift)
restaur_oneP <- subset(restaur_6d, people ==1 , dining = "indoor")
View(restaur_oneP)
redundant=colSums(subset.matrix) >= 1
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned %>% length()
sort3=head(sort(rulepruned,by ="lift"),30)
inspect(head(sort(rulepruned,by ="lift"),30))
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
summary(transac) #find most popular item
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.1))
rules
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=as.matrix(is.subset(sorted_lift,sorted_lift))
redundant=colSums(subset.matrix) >= 1
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned %>% length()
redundant=colSums(subset.matrix) > 1
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned %>% length()
sort3=head(sort(rulepruned,by ="lift"),30)
inspect(head(sort(rulepruned,by ="lift"),30))
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
transac <- restaur_6d %>% select(invoice_uuid, item_name)
transac$invoice_uuid <- as.factor(transac$invoice_uuid)
transac$item_name <- as.factor(transac$item_name)
transac <- as(split(transac$item_name,transac$invoice_uuid),"transactions")
summary(transac) #find most popular item
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.1))
rules
sorted_lift=sort(rules,by= 'lift' )
inspect(sorted_lift)
subset.matrix=as.matrix(is.subset(sorted_lift,sorted_lift))
redundant=colSums(subset.matrix) > 1
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned %>% length()
sort3=head(sort(rulepruned,by ="lift"),30)
inspect(head(sort(rulepruned,by ="lift"),30))
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
rulepruned=sorted_lift[!redundant]
inspect(rulepruned)
rulepruned %>% length()
sort3=head(sort(rulepruned,by ="lift"),30)
inspect(head(sort(rulepruned,by ="lift"),30))
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
rules <- apriori(transac, parameter=list(support=0.1, confidence=0.1))
subset.matrix=is.subset(sorted_lift,sorted_lift)
sorted_lift=sort(rules,by= 'lift' )
redundant=colSums(subset.matrix) > 1
rulepruned=sorted_lift[!redundant]
sortN=head(sort(rulepruned,by ="lift"),30)
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
rules <- apriori(transac, parameter=list(support=0.1, confidence=0.1))
sorted_lift=sort(rules,by= 'lift' )
dim(sorted_lift)
sorted_lift
rules <- apriori(transac, parameter=list(support=0.01, confidence=0.1))
sorted_lift=sort(rules,by= 'lift' )
sorted_lift
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
which(redundant)
redundant
View(redundant)
redundant=colSums(subset.matrix) >= 1
which(redundant)
rulepruned=sorted_lift[!redundant]
sortN=head(sort(rulepruned,by ="lift"),30)
sortN=head(sort(rulepruned,by ="lift"),10)
rulepruned
redundant=colSums(subset.matrix) > 1
which(redundant)
rulepruned=sorted_lift[!redundant]
sortN=head(sort(rulepruned,by ="lift"),10)
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
rules <- apriori(transac, parameter=list(support=0.001, confidence=0.1))
sorted_lift=sort(rules,by= 'lift' )
subset.matrix=is.subset(sorted_lift,sorted_lift)
redundant=colSums(subset.matrix) > 1
which(redundant)
rulepruned=sorted_lift[!redundant]
sortN=head(sort(rulepruned,by ="lift"),10)
plot(head(sort(rulepruned,by ="lift"),100), method='scatterplot')
plot(head(sort(rulepruned,by ="lift"),30), method='graph', control = list(type='items'))
plot(head(sort(rulepruned,by ="lift"),30), method = 'grouped')
shiny::runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
library(rsconnect)
deployApp()
deployApp()
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
install.packages("ggplot1")
install.packages("ggplot2")
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
summary(tranc_data)
table(tranc_data$restaurant_uuid) # 6d0ebab3-edf8-4e04-a947-1973e76ab11f 這間餐廳最多筆資料
restaur_id <- unique(tranc_data$restaurant_uuid)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
trans_time <- function(unix_t){
return(as.character(as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")))
}
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
View(restaur_6d)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
View(MyDatesTable)
dim(restaur_6d)
restaur_6d$timestamp
as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei"))
as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei"))
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei")
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei")
?as.POSIXct
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei",format = "%Y-%m-%d %H:%M:%S")
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei")
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei") %>% format("%Y-%m-%d %H:%M:%S")
as.POSIXct(1465982850, origin="1970-01-01",tz = "Asia/Taipei") %>% format("%Y-%m-%d %H")
restaur_6d$timehourly <- sapply(restaur_6d$unix,trans_time2)
trans_time2 <- function(unix_t){
hourly <-as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei") %>% format("%Y-%m-%d %H")
return(hourly)
}
restaur_6d$timehourly <- sapply(restaur_6d$unix,trans_time2)
restaur_6d %>% View()
class(restaur_6d$timehourly)
?table
with(restaur_6d, table(cut(as.POSIXlt(timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name))
a_test <- table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name)
a_test <- with(restaur_6d, table(cut(as.POSIXlt(timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name))
View(a_test)
with(restaur_6d, table(cut(as.POSIXlt(timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name))
View(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name))
with(restaur_6d, table(cut(as.POSIXlt(timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name)) %>% View()
?cast
library(reshape2)
?cast
?melt
cast(melt)
cast
library(reshape)
cast(melt)
cast(a_test)
dcast(a_test, Var1~item_name)
dcast(a_test, Var1 ~ item_name, value.var = "Freq")
dcast(a_test, Var1 ~ item_name, value.var = "Freq")
colnames(a_test)
View(a_test)
class(a_test)
as.data.frame(a_test) %>% View()
as.data.frame(a_test) %>% colnames()
a_test <- as.data.frame(a_test)
a_cast <- dcast(a_test, Var1 ~ item_name, value.var = "Freq")
a_cast %>% View()
,item_name)))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
,item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
rest_cast <- as.data.frame(with(restaur_6d,table(cut(as.POSIXct(timestamp,
tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
?write.csv
write.csv(rest_cast,"productByTime.csv")
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[2])
restaur_6d$timehourly <- sapply(restaur_6d$unix,trans_time2)
restaur_6d %>% View()
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
restaur_6d$timehourly <- sapply(restaur_6d$unix,trans_time2)
restaur_6d %>% View()
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
library(reshape2)
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timehourly, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
shiny::runApp('shiny_app')
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "GMT"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[3])
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(reshape2)
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
table(tranc_data$restaurant_uuid) # 6d0ebab3-edf8-4e04-a947-1973e76ab11f 這間餐廳最多筆資料
restaur_id <- unique(tranc_data$restaurant_uuid)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
restaur_6d$timehourly <- sapply(restaur_6d$unix,trans_time2)
trans_time <- function(unix_t){
return(as.character(as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")))
}
trans_time2 <- function(unix_t){
hourly <-as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei") %>% format("%Y-%m-%d %H")
return(hourly)
}
s
restaur_6d$timehourly <- sapply(restaur_6d$unix,trans_time2)
class(restaur_6d$timehourly)
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timehourly, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
with(restaur_6d,
table(cut(as.POSIXct(timehourly, tz = "Asia/Taipei"),
breaks = "hour"),item_name)))
with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[2])
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
rest_cast <- as.data.frame(with(restaur_6d,
table(cut(as.POSIXct(timestamp, tz = "Asia/Taipei"),
breaks = "hour"),item_name))) %>% dcast(Var1 ~ item_name, value.var = "Freq")
View(rest_cast)
