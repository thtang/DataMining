#boxplot for each hour
ggplot(data=freq_non_zero , aes(as.factor(time),Freq,fill = as.factor(time))) +
geom_boxplot()+
guides(fill=FALSE)
#time series plot
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-05") &
MyDatesTable$Var1 > as.POSIXct("2016-04-02"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
#forecast
library(forecast)
library(zoo)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
autoplot(x)
auto.arima(x)
autoplot(forecast(auto.arima(ts(x)),h=12))
autoplot(forecast(ets(ts(x)),h=12))
autoplot(forecast(ets(ts(x),model="ZZZ"),h=12))
autoplot(forecast(ets(ts(x),model="ZZZ"),h=1))
autoplot(forecast(ets(ts(x),model="ZZZ"),h=12))
ts(x)
autoplot(forecast(ets(x,model="ZZZ"),h=12))
x
autoplot(forecast(ets(xts(x),model="ZZZ"),h=12))
library("xts")
library(xts)
autoplot(forecast(ets(xts(x),model="ZZZ"),h=12))
xts(x)
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-09") &
MyDatesTable$Var1 > as.POSIXct("2016-04-02"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
library(forecast)
library(zoo)
library(xts)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
autoplot(x)
auto.arima(x)
autoplot(forecast(ets(xts(x),model="ZZZ"),h=12))
ets(xts(x),model="ZZZ")
autoplot(forecast(ets(xts(x),model="AAZ"),h=12))
decompose(as.ts(xts(x)))
xts(x)
autoplot(forecast(ets(xts(x),model="ZZZ"),h=12))
?ets
CutDatesTable$Var1
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1))
xts_obj
?xts
str(xts_obj )
attr(xts_obj, 'frequency') <- 24
str(xts_obj )
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1),frequency = 24)
str(xts_obj )
autoplot(forecast(ets(xts(x),model="ZZZ"),h=12))
attr(xts_obj, 'frequency') <- 24
str(xts_obj )
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=12))
decompose(as.ts(xts(x)))
forecast(ets(xts_obj,model="ZZZ"),h=12)
View(xts_obj)
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1),frequency = 24)
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=12))
attr(xts_obj, 'frequency') <- 24
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=12))
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=24))
runApp()
runApp()
?ets
runApp()
runApp()
runApp()
runApp()
as.POSIXct(CutDatesTable2$Var1)
runApp()
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=24))
axis.POSIXct(1,at=as.POSIXct(CutDatesTabl2$Var1),format="%a %H",las=2,cex=0.5)
axis.POSIXct(1,at=as.POSIXct(CutDatesTable$Var1),format="%a %H",las=2,cex=0.5)
oplot(forecast(ets(xts_obj,model="ZZZ"),h=24))
axis.POSIXct(1,at=as.POSIXct(CutDatesTable$Var1),format="%a %H",las=2,cex=0.5)
plot(forecast(ets(xts_obj,model="ZZZ"),h=24))
axis.POSIXct(1,at=as.POSIXct(CutDatesTable$Var1),format="%a %H",las=2,cex=0.5)
plot(forecast(ets(xts_obj,model="ZZZ"),h=24))
axis.POSIXct(1,at=as.POSIXct(CutDatesTable$Var1),format="%a %H",las=2,cex=0.5)
plot(forecast(ets(xts_obj,model="ZZZ"),h=24),xaxt = "n")
axis.POSIXct(1,at=as.POSIXct(CutDatesTable$Var1),format="%a %H",las=2,cex=0.5)
axis(1,at=as.POSIXct(CutDatesTable$Var1),format="%a %H",las=2,cex=0.5)
axis(1,at=as.POSIXct(CutDatesTable$Var1),las=2,cex=0.5)
plot(forecast(ets(xts_obj,model="ZZZ"),h=24),xaxt = "n")
axis(1,at=as.POSIXct(CutDatesTable$Var1),las=2,cex=0.5)
x.Date <- as.Date(paste(rep(2003:2004, each = 12), rep(1:12, 2), 1, sep = "-"))
x <- zoo(rnorm(24), x.Date)
plot(x)
plot(x, xaxt = "n")
axis(1, at = time(x), labels = FALSE
)
runApp()
?autoplot
runApp()
runApp()
runApp()
deployApp()
library(rsconnect)
deployApp()
deployApp()
deployApp()
?renderTable
runApp()
runApp()
runApp()
deployApp()
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=24),xaxt = "n")
forecast(ets(xts_obj,model="ZZZ"),h=24)
?autoplot
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=24),xaxt = "n")
detach(ggfortify)
detach("ggfortify")
detach("package:ggfortify", unload=TRUE)
autoplot(forecast(ets(xts_obj,model="ZZZ"),h=24),xaxt = "n")
autoplot(AirPassengers)
d.arima <- auto.arima(AirPassengers)
d.forecast <- forecast(d.arima, level = c(95), h = 50)
d.forecast
d.arima
autoplot(forecast(auto.arima(xts_obj,model="ZZZ"),h=24),xaxt = "n")
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")
autoplot(forecast(auto.arima(ts(xts_obj)),h=24),xaxt = "n")
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")
x.ts = ts(xts_obj, freq=24)
plot(forecast(ets(x.ts), 10))
plot(forecast(ets(x.ts), 12))
plot(forecast(ets(x.ts), 24))
xts_obj
xts_obj[1]
x.ts = ts(xts_obj, freq=24,start = c(2016,4,2))
plot(forecast(ets(x.ts), 24))
x.ts = ts(xts_obj, freq=24*7,start = c(2016,4,2))
plot(forecast(ets(x.ts), 24))
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")+scale_x_date(format = "%b-%Y")
forecast(auto.arima(xts_obj),h=24)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+scale_x_date(format = "%b-%Y")
ets(xts_obj)
forecast(ets(xts_obj),h=24)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
xts_obj
class(xts_obj)
str(xts_obj)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n",type="p")
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
plot(forecast(ets(xts_obj),h=24),type="p")
,type="p"
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
plot(forecast(ets(xts_obj),h=24),type="1")
plot(forecast(ets(xts_obj),h=24),type="l")
plot(as.POSIXct(CutDatesTable$Var1),forecast(ets(xts_obj),h=24),type="l")
len(as.POSIXct(CutDatesTable$Var1))
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
?forecast
ets(xts_obj)
?est
?ets
?window
autoplot(forecast(ets(window(xts_obj)),h=24),xaxt = "n")
window(xts_obj)
class(window(xts_obj))
ets(xts_obj)
CutDatesTable$Var1
CutDatesTable$Var1 +12
as.POSIXct(CutDatesTable$Var1) + 12
autoplot((as.POSIXct(CutDatesTable$Var1) + 12),forecast(ets(xts_obj),h=24),xaxt = "n")
as.POSIXct(CutDatesTable$Var1) + 12
plot((as.POSIXct(CutDatesTable$Var1) + 12),forecast(ets(xts_obj),h=24),xaxt = "n")
length(forecast(ets(xts_obj),h=24))
forecast(ets(xts_obj),h=24)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
c(as.POSIXct(CutDatesTable$Var1) + 12)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+ scale_x_discrete(name ="Dose (mg)",
limits=as.POSIXct(CutDatesTable$Var1) + 12)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+ scale_x_discrete(name ="Dose (mg)",
limits=c(as.POSIXct(CutDatesTable$Var1) + 12))
as.character(as.POSIXct(CutDatesTable$Var1) + 12)
as.character(as.POSIXct(CutDatesTable$Var1) + 12) %>% class()
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+
scale_x_discrete(name ="Dose (mg)",limits=as.character(as.POSIXct(CutDatesTable$Var1) + 12))
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+
scale_x_continuous(name ="Dose (mg)",limits=as.character(as.POSIXct(CutDatesTable$Var1) + 12))
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+
scale_x_continuous(name ="Dose (mg)",limits=c(as.POSIXct(CutDatesTable$Var1)[1],c(as.POSIXct(CutDatesTable$Var1)+12)[1])
x.ts = ts(xts_obj, freq=24*7,start = c(2016,4,2))
plot(forecast(ets(x.ts), 24))
c(as.POSIXct(CutDatesTable$Var1) + 12)
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")+
scale_x_continuous(name ="Dose (mg)",limits=c(as.POSIXct(CutDatesTable$Var1)[1],c(as.POSIXct(CutDatesTable$Var1)+12)[1]))
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
library(rsconnect)
deployApp()
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
saveRDS(restaur_6d,"tran1.rds")
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[2])
saveRDS(restaur_6d,"tran2.rds")
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[3])
saveRDS(restaur_6d,"tran3.rds")
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[4])
saveRDS(restaur_6d,"tran4.rds")
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[5])
saveRDS(restaur_6d,"tran5.rds")
shiny::runApp()
deployApp()
deployApp()
''
''
runApp()
deployApp()
install.packages("shinythemes")
runApp()
deployApp()
library(rsconnect)
deplotA
deployApp()
a <- "res6"
a
a[6]
substr(a, 4)
substr(a, 3)
substr(a, 4,4)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
library(rsconnect)
deployApp()
runApp()
deployApp()
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
summary(tranc_data)
summary(tranc_data)
View(tranc_data%>%())
View(tranc_data%>%head())
View(MyDatesTable)
colnames(MyDatesTable) <- c("time","Customers_flow","hour")
shiny::runApp()
library(rsconnect)
deployApp()
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")
auto.arima(xts_obj)
forecast(auto.arima(xts_obj),h=24)
resid(auto.arima(xts_obj))
plot(resid)
resid(auto.arima(xts_obj)) %>% plot
resid(ets(xts_obj)) %>% plot
resid(auto.arima(xts_obj)) %>% plot
resid(ets(xts_obj)) %>% plot
resid(auto.arima(xts_obj)) %>% plot
auto.arima(xts_obj)
summary(auto.arima(xts_obj))
summary(est(xts_obj))
summary(ets(xts_obj))
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-03-29") &
MyDatesTable$Var1 > as.POSIXct("2016-04-02"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
library(forecast)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-29") &
MyDatesTable$Var1 > as.POSIXct("2016-04-02"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
library(forecast)
library(forecast)
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
summary(tranc_data)
table(tranc_data$restaurant_uuid) # 6d0ebab3-edf8-4e04-a947-1973e76ab11f 這間餐廳最多筆資料
restaur_id <- unique(tranc_data$restaurant_uuid)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
saveRDS(restaur_6d,"tran5.rds")
#restaur_6d$timestamp[1:10]
#unix_t <- restaur_6d$unix[1]
#as.POSIXct(unix_t, origin="1970-01-01",tz = "GMT")
trans_time <- function(unix_t){
return(as.character(as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")))
}
#先分成24小時，看每小時的來客數
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
# choose freq non zero
saveRDS(MyDatesTable,"res6.rds")
freq_non_zero <- subset(MyDatesTable,MyDatesTable$Freq != 0 & MyDatesTable$time <= as.POSIXct("2017-05-10"))
#boxplot for each hour
ggplot(data=freq_non_zero , aes(as.factor(time),Freq,fill = as.factor(time))) +
geom_boxplot()+
guides(fill=FALSE)
#time series plot
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-29") &
MyDatesTable$Var1 > as.POSIXct("2016-04-02"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
#forecast
library(forecast)
library(zoo)
library(xts)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
autoplot(forecast(auto(xts_obj),h=24),xaxt = "n")
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
summary(auto.arima(xts_obj))
summary(ets(xts_obj))
?arima
?ets
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-04") &
MyDatesTable$Var1 > as.POSIXct("2016-03-29"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
library(forecast)
library(zoo)
library(xts)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")
resid(auto.arima(xts_obj))
plot(auto.arima(xts_obj))
plot(resid(auto.arima(xts_obj)))
plot(resid(ets(xts_obj)))
shiny::runApp()
shiny::runApp()
library(rsconnect)
shiny::runApp()
deployApp()
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
deployApp()
library(xlsx)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(reshape2)
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
summary(tranc_data)
table(tranc_data$restaurant_uuid) # 6d0ebab3-edf8-4e04-a947-1973e76ab11f 這間餐廳最多筆資料
restaur_id <- unique(tranc_data$restaurant_uuid)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[2])
trans_time <- function(unix_t){
return(as.character(as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")))
}
trans_time2 <- function(unix_t){
hourly <-as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei") %>% format("%Y-%m-%d %H")
return(hourly)
}
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour"),item_name),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
saveRDS(MyDatesTable,"res6.rds")
freq_non_zero <- subset(MyDatesTable,MyDatesTable$Freq != 0 & MyDatesTable$time <= as.POSIXct("2017-05-10"))
ggplot(data=freq_non_zero , aes(as.factor(time),Freq,fill = as.factor(time))) +
geom_boxplot()+
guides(fill=FALSE)
freq_non_zero <- subset(MyDatesTable,MyDatesTable$Freq != 0 & MyDatesTable$time <= as.POSIXct("2017-05-10"))
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
saveRDS(MyDatesTable,"res6.rds")
freq_non_zero <- subset(MyDatesTable,MyDatesTable$Freq != 0 & MyDatesTable$time <= as.POSIXct("2017-05-10"))
ggplot(data=freq_non_zero , aes(as.factor(time),Freq,fill = as.factor(time))) +
geom_boxplot()+
guides(fill=FALSE)
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-04") &
MyDatesTable$Var1 > as.POSIXct("2016-03-29"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-04") &
MyDatesTable$Var1 > as.POSIXct("2016-03-29"))
View(CutDatesTable)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[6])
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
freq_non_zero <- subset(MyDatesTable,MyDatesTable$Freq != 0 & MyDatesTable$time <= as.POSIXct("2017-05-10"))
ggplot(data=freq_non_zero , aes(as.factor(time),Freq,fill = as.factor(time))) +
geom_boxplot()+
guides(fill=FALSE)
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-04") &
MyDatesTable$Var1 > as.POSIXct("2016-03-29"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
library(forecast)
library(zoo)
library(xts)
x<- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
CutDatesTable$Var1
autoplot(x)
auto.arima(x)
library(ggfortify)
autoplot(forecast(auto.arima(xts_obj),h=24),xaxt = "n")
autoplot(forecast(ets(xts_obj),h=24),xaxt = "n")
summary(auto.arima(xts_obj))
summary(ets(xts_obj))
x.ts = ts(xts_obj, freq=24*7,start = c(2016,4,2))
plot(forecast(ets(x.ts), 24))
c(as.POSIXct(CutDatesTable$Var1) + 12)
fit <- tslm(xts_obj ~ trend + season)
xts_obj<- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
x.ts = ts(xts_obj, freq=24*7,start = c(2016,4,2))
plot(forecast(ets(x.ts), 24))
c(as.POSIXct(CutDatesTable$Var1) + 12)
fit <- tslm(x.ts ~ trend + season)
plot(forecast(fit, h=20))
View(x.ts)
str(x.ts)
tranc_data <-read.csv("iChef data for BAFT 2016 class.csv",
stringsAsFactors = F) %>% select(-c(X,X.1,X.2,X.3))
summary(tranc_data)
table(tranc_data$restaurant_uuid) # 6d0ebab3-edf8-4e04-a947-1973e76ab11f 這間餐廳最多筆資料
restaur_id <- unique(tranc_data$restaurant_uuid)
restaur_6d <- subset(tranc_data,restaurant_uuid==restaur_id[1])
trans_time <- function(unix_t){
return(as.character(as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei")))
}
trans_time2 <- function(unix_t){
hourly <-as.POSIXct(unix_t, origin="1970-01-01",tz = "Asia/Taipei") %>% format("%Y-%m-%d %H")
return(hourly)
}
restaur_6d$timestamp <- sapply(restaur_6d$unix,trans_time)
MyDatesTable <- as.data.frame(table(cut(as.POSIXlt(restaur_6d$timestamp,tz = "Asia/Taipei"), breaks="hour")),
stringsAsFactors = F)
MyDatesTable$time <- sapply(MyDatesTable$Var1, hour)
CutDatesTable <-subset(MyDatesTable,MyDatesTable$Var1<as.POSIXct("2016-04-04") &
MyDatesTable$Var1 > as.POSIXct("2016-03-29"))
ggplot(CutDatesTable, aes(as.POSIXct(Var1), Freq)) + geom_line() +
xlab("") + ylab("Daily Views")
View(CutDatesTable)
xts_obj <- xts(CutDatesTable$Freq, order.by = as.POSIXct(CutDatesTable$Var1,format="%y-%m-%d %H:%M:%S"
),frequency = 24)
attr(xts_obj, 'frequency') <- 24
plot(forecast(ets(xts_obj), 24))
fit <- tslm(xts_obj ~ trend + season)
x <- zoo(CutDatesTable$Freq,as.POSIXct(CutDatesTable$Var1))
fit <- tslm(x ~ trend + season)
fit <- tslm(ts(x) ~ trend + season)
fit <- tslm(xts_obj ~ trend + season)
xts_obj
str(xts_obj)
xts_obj
length(xts_obj)
fit <- tslm(ts(as.vector(xts_obj),frequency = 24)~ trend + season)
plot(forecast(fit, h=20))
plot(forecast(fit, h=24))
summary(fit)
fit.red
residuals(fit)
plot(residuals(fit))
summary(fit)
fit <- tslm(ts(as.vector(xts_obj),frequency = 24)~  season)
plot(forecast(fit, h=24))
summary(fit)
plot(residuals(fit))
fit <- tslm(ts(as.vector(xts_obj),frequency = 24)~ trend + season)
plot(forecast(fit, h=24))
summary(fit)
plot(residuals(fit))
plot(forecast(fit, h=24))
shiny::runApp()
depl
library(rsconnect)
deployApp()
shiny::runApp()
library(rsconnect)
deployApp()
runApp()
